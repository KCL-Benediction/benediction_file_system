\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{fullpage} % Package to use full page
\usepackage{parskip} % Package to tweak paragraph skipping
\usepackage{tikz} % Package for drawing
\usepackage{float}

\title{Benediction Final Report}
\author{Group Members: 1862457 Chayanit Krairit , 1781404 Isaac Muhumuza,\\ 1846353 Jihye Hwang, 1833095 Yao Te-Chien, \\1863752 Yan Li, 1876334 Yiwei Zhang}
\date{March 2019}

\begin{document}

\maketitle

\section{Introduction}
guess as a whole team for what's our work and how address our problem briefly  and what we achieved
\section{Review}
//might not need it

\section{Requirements and Design}
\subsection{Requirements}
The aim for this project is to create the ‘hub and spoke’ file synchronizer. A single central server is needed to host the clients and synchronise files. The hub is required to speak a network protocol to clients, be able to deal with multiple simultaneous clients and handling conflicts. Thus two clients are required to demonstrate this and would be develop as a desktop client which can be a command-line or background utility and a mobile client which would be a stand-alone application developed in an iOS or Android environment. Having at least 2 clients will allow files to be uploaded onto the server with different type of users. This is to ensure that the server will be able to handle multiple simultaneous clients and clashes of having identical copies of files.
To tackle this problem, the team has decided to divide into 3 sub-teams: mobile client team, desktop client team and back-end server team to ensure that every member has contributed to the system’s implementation and completing the tasks they feel confident in. Each sub-team has created a Gantt chart that acts as a guide to complete this project and was then combined to create as complete planning schedule for the whole group. The figure below shows the overall Gantt chart for this project.

The desktop client team has decided to develop a web application for users to conveniently use the UI to upload and download files from the server instead of using command-line. 
The mobile client team has decided to implement in iOS environment as the members have previous experiences in developing applications in this environment. 

The team has decided to reconsidered the objectives initially proposed in the group's initial report as one of the members suggested a change on the system. In conclusion, the team has agreed that for a user to use the system, they must login or sign up before getting access to upload or download files onto the server. This will help to identify each individual user when they are using the system. Furthermore, the team have also removed the 'extend the support for file types' in the optional objectives as the team believes that the user should be able to upload or download any files they want to/from the server.
The updated objectives for this project is as follows:
\begin{itemize}
  \item Develop a main server, a web client and a mobile client (based on iOS).
  \item Create Log-in page and users are required to log-in before accessing the files.
  \item Clients must be able to upload, download and delete files.
  \item Local server must be in sync with the main server.
  \item Software testing.
\end{itemize}
The optional objectives are to be considered as an advanced implementation to the project if time is in favour are:
\begin{itemize}
  \item Implement security algorithms to protect private information and address the security system running smoothly.
  \item Apply encryption, decryption, compression and sharing functions to local files.
\end{itemize}

The \emph{Waterfall} model is used as a planning model for this project. Explain waterfall model. 

\subsection{Design}
The user interface should be similar for both clients to ensure its ease of use and does not require them to learn the interface again in different platforms. For the team to be able to achieve this, the mobile and desktop client team comes together to design the UI for both platforms to ensure that both UI layout is nearly identical this includes deciding on the colour scheme to be used and functions/buttons need to be present on the UI, etc.
\subsubsection{Mobile Client}
\begin{itemize}
\item\textbf{Architecture}\newline
The client is developed in a MAC environment, with X-code 10.1 and Swift 4.2. The client is build using MVC (Model-View-Controller) architecture which consists of model layer, view layer and controller layer. Users of mobile clients interact with the view layer; model layer decides what data should be collected as components of the view, while the controller layer acts as a bridge between the view and the model.

\item\textbf{User Interface}\newline
The main page (\emph{Figure 2(a)}) is contained for the refresh button, sorting files, navigation bar button and search bar. The files can be arranged by name, size and tag, while the table view controller will list all the documents. The main page is made table view controller, showing the list of synchronized server files. The team used API parsing to get the data of files from the server. The files are listed with name and version. The table cell appears with the file title, and version. User clicks the file cell, It will show the file contents. Once slide the table cell, delete button and download button will appear. The delete button can delete the files in the server. The download button copy the files in the local database, the client can see the file in the local file. Then, free to edit the file and upload the file back to the server. The file types are mp3, mp4 also available, each file have a unique version, name and date...(so on) every file has a unique ID and the file class is common knowledge for both clients. 

The sidebar (\emph{Figure 2 (b)}) navigates the user to \textbf{home, profile,local files, log in-out, trash and settings}. The home button appears 'cloud' name which is back to the main page. The profile function contains information of the current user which are user name with photo, email address and phone number. The local files button connected with local data. The local files are arranged table view, slide the table cell it will appear delete button. ++ put pic!!
And also a user easily can find files by the search bar.
The log out button (Soon )++ 

Once delete the files in the local files, they will be stored in the rubbish bin which name is the Trash. The trash stores deleted files permanently and provide a method for recovering files. In the setting, the page has three table cell for App Information, Report Error and Software update. Once clicked each cell, the page will show the details of the required information. 

\item\textbf{Adversity}\newline
In the beginning, the team makes a plan, User Interface diagram and setting the functions that should be in the team's projects manually and optionally which could be further implementation. After that the team start to build the sub-pages about the view controller at first like profile, setting and other Controller View. 

Secondly, the team decide to make files view with the table arranged that looks cleaner and also added the slides function to every table cell which is more trendy these days. Thirdly, connected to the local database and get the data to store in the local cloud page. And also con with the local album ..++ Then, connecting to the server with API end-point. Before the works, the whole group members (Benediction) decides about data type and structures to be shared with the server and the other two clients teams. Afterwards, the team connected the page using page seque function with present Modally way.

During the process, the team has many adversities. One of the adversity was that after connecting to the server through API. The team used the table view controller and add the UIView in the main page. First tried, the table view appeared to the UIView on the main page but not the server files. Only appear empty table cells, it has to show files title and version too. Also, if clicked the cell, it showing initialize WebView which is "apple.com". And the team's members figured out the problem was in the Table View controller code. The arrays which are stored the files name, dates and version have a problem to get the data from the main view controller. So, the team decide to do not using UIView just change the main home controller to a table view controller. But the problem here was we already build the navigation bar and the other functions connected to the main view controller. That means the team have to change all code to fit on the new table view controller. When the team decided to change the whole structure of the program code. That was a big deal because at that moment most of the parts were built. That means also not much time left for fixing. But still made the mind to rebuild the program entirely, the program could be more clear and obvious to the user interface. So, the team worked together day and night. It took around one week and a half but it works successfully. Now, the mobile program has the table view controller user can see what is in the server and download the server files right away. 

The team also considered about local files be located together with the server files in one main table view page. That case would give user confused, so the first main page is shown the synchronized server files and free to download. Once download files, the files are stored in the local files. A client can edit files over there but not in the main page this would bring about conflicts between files. If a client wants to edit a file, first download in the main page. After user can re-upload the files, that will be stored in the server with a different version.

The other adversity was ...++







\end{itemize}
\subsubsection{Desktop Client}

\begin{figure}[H]
\begin{center}
\includegraphics[width=9.5cm]{desktop-client.png}
\end{center}
\caption{Desktop client User Interface.}\label{ex4}
\end{figure}

The desktop user interface has two main components. Firstly, the navigation bar on the left hand side which allows users to navigate through different features(pages) of the application. The team has decided to have \textbf{Files}, \textbf{Settings} and \textbf{Log out} in the navigation bar. The \textbf{Files} navigates to display the file page which contains the synchronized files from the server and allow the users to upload files on their local machine to the server. The \textbf{Settings} will take the users to the setting page which allows them to edit their personal details or find the system support. The \textbf{Log out} button is essential as mentioned above, the users will require to log in before using the system, thus naturally they will need to be able to log out of the system by using the logout button.
Secondly, main component interface which comprises of 2 sections: the top bar and the main content container. The top bar will displays the directory and the user's account while the main content container will displays the corresponding page the user is currently in.

To upload a file onto the server, the team has decided to use a drag and drop function to allow users to drag any files in their local repository into any areas of the main content container. The file would be automatically upload onto the system and would trigger the process of synchronization. The synchronized status for each file will be presented with corresponding icons. The types of the status include uploading, downloading, synchronization failure, Up-to-date and pending to upload.

The team has decided that for a user to download a file, instead of having a download button, it would be more appropriate for the user to double-click on the file they want to download as this action also apply to when the user wants to open a file, they would need to double-click on it. Thus this inspire the team to use this action as a download function on the UI.

The front-end development will be developed in React, which is a open-source JavaScript library. This is used because it is much easier than the need to manually build user interfaces with native Web APIs and JavaScript. It also provides a component-based library which allows the team to build high-quality user-interfaces for the system web application by coding HTML and CSS inside JavaScript which makes it easier to connect the front end UI with the back end server.
\subsection{Backend Server Application}
\subsubsection{Overview}

The backend server application is responsible for handling every business logics, file stroage, database connection for this project. For serving different types of clients, the endpoints of the server application should be able to used by different sources including mobile application and desktop application. To achieve the goal, the server would follow disciplines of RESTful API.

The team-working plays a huge role in the technical stacks. At first, two members assigned to work on backend application cannot meet an agreement on which language to use. One of the member is familiar with Java but the other member has no experience on Java and find it hard to learn from scratch. After some discussions in the team, the team came with a consensus of switching roles and change the language to Javascript considering the factors described below. 

First, Javascript is a language works both on the client side on web development and backend side with Node.js, so the team members for desktop client and backend can share their experiences, fix errors on syntax, and help each other. On top of that, Javascript has less rules to follow and require less experience to learn. Most importantly, one of the member in the team has three years working experience on Javascript development. 

Overall, The team uses Javascript and Node.js as its main language on the backend application,  MongoDB and JSON file as solution for data storage. For the file storage, the server store the files in a folder where the application running. More details of the implementation and difficulties met are described below.

\subsubsection{Architecture}

The team uses Express.js as its main framework for back-end application. Express is a back-end framework based on Nodejs. the team chooses Express as its main framework for back-end application for multiple reasons. First of all,The disadvantages is based on simplicity, which means that each function needs to choose different components to build. Although each function has its own scaffolding help, it will take a lot of time to build an integrated basic framework.

However,it still has plenty of advantages such as flexibility ,simplicity, and  Plug-ins are numerous, simple, free and frugal, suitable for simple business logic model.  Express mainly adds routing, middleware and template mechanism on the basis of HTTP library, which provides basic tools for rapid development.

The team also applies MVC model to implement the application. The Model-View-Controller (MVC) is an architectural pattern that separates an application into three main logical components: the model, the view, and the controller. Each of these components are built to handle specific development aspects of an application.

The controllers are the components to deal with business logics. In this project, the team divide the controller functions into two controllers. The first controller is designed to handle all the requests related to file operating. This should include uploading, downloading, renaming, updating and deleting a file on the server. In addition to file controller, which named as fileRouter.js in the project,  userRouter.js is designed to handle all requests related to users and authorization. This includes logging in and user registeration. 

The views of the project on the backend application are not the views for the clients. In other words, in the basic requirements, the backend team does not need to create any GUI for the user. However, they created a page that includes the documentation of the endpoints in order to let other developers to access the information easily. 

The model parts of the application is designed to specify the structure of the data stored and to offer encapsulated modules for other part of the project to directly access the database. This also avoids redundancy of the codes for functions that dealing with database connections.

\subsubsection{Documentation}

The team also made a documentation describing all the details for endpoints in the backend application. The document is hosted in Google Drive platform in a format of Google Doc file. The document consists of three parts. First, an overview on the mechanism of the connection between client and server is described including authorization, logging in/out, and the difference between HTTP connection and WebSocket connection. Next, the second part of the documentation is to offer information for all the HTTP endpoints with details include URL, description, fields in the request body, and the structure of the response. In the last part of the documentation, the team listed all the WebSocket events that should be listened by the clients as long as its details include event names and their payload.

\section{Implementation}
\subsection{Mobile Client}


\subsection{Desktop Client}
\subsubsection {Authentication}
This function is a core implementation as it ensures that all users must be authenticated and logged in before accessing the web application.
In the code, there is a \emph{user} object that stores the user's username and password in order to check for their rights in entering the application. \emph{AuthService.jsx} file is used to fetch user's input and sends it to the back-end server via API. When a user have sign up to the system, the system will alert the user that they have successfully registered and will redirect the user to the login page automatically. Additionally, when the registered user is logged in, a token is assigned to them from the API server. This allows them to fetch the data using the token (within timed session) instead of using their username and password to authenticate each protected data.
When logged in, the token is saved in the local storage for further usage and fetching data from the server. The token will get cleared when the user is logged out of the application. This is shown by the figure below.

\begin{figure}[H]
\begin{center}
\includegraphics[width=6cm]{tokenAuth.PNG}
\end{center}
\caption{Setting,getting and removing token.}\label{ex4}
\end{figure}

A small browser library (jwt-decode npm package) is used to help decoding the token in order to send the required authorisation headers to the API server. This is done by setting the authorisation header to \emph{Authotisation: Bearer xxxxxxx.xxxxxxxx.xxxxxx}. This is shown by figure .....

\begin{figure}[H]
\begin{center}
\includegraphics[width=6cm]{decodeToken.PNG}
\end{center}
\caption{Decoding token to set authorisation header.}\label{ex4}
\end{figure}

To check for the response from the API server,\emph{checkStatus} function is used to display error information if the response returns an error, i.e 400 or 500 status code. The success http status code lies in between 200 (success) and 300 (redirection) in which will return the response data successfully retrieved from the server.

The \emph{WithAuth.jsx} ensures that the user is logged in before accessing the main page. It relies on the data retrieved from  \emph{AuthService.jsx} to check the state of a user - whether the user is authorised or is logged out of the system. 


\subsection{Backend Server Application}

\subsubsection{Real-time Communication: WebSocket}

To achieve the requirement of synchronization of files. All the clients should be able to receive all the data in real-time. As a result, a real-time communication protocol should be applied in the project. In order to let the mobile client and the desktop client to be supported in the same solution. The team chooses WebSocket.

(Harper-Websocket explanation)
WebSocket is a protocol for full-duplex communication over a single TCP connection.
WebSocket makes data exchange between client and server simpler and allows server to push data to client actively. In WebSocket API, browsers and servers only need to shake hands once to create a persistent connection and carry out bidirectional data transmission.

The events broadcasted by WebSocket service should include all the event related to file changed on server. As the result, the team implemented:
\begin{itemize}
  \item File Update
  \item File Locked
  \item File UnLocked
  \item File Deleted
  \item File Created
\end{itemize}
All of the events broadcasted by the server is in the same structure that specify the name of the event and the data related to the event.

\subsubsection{Security: JSON Web Token}

To allow every client to process the authorization, a general standard should be selected. After conduct research among different approach, the team decides to use JSON Web Token as the solution for this project.

(Harper-JWT explanation)



The team use a Node.js module called node-jsonwebtoken to achieve the objective. To integrate the module into the Express framework, another module called express-jwt is used as a middleware that check the authorization before the request is processed by the function in the controllers. 

An JSON web token is generated when the user makes a log in request to the server. Once the server finishes the password and username checking with MongoDB, the server would generate a token based on secret string and the id of the user. After logging in, the client should put the token in the header in order to provide authorized evidence to the server application. 

\subsubsection{Security: MD5 Hashing}

In order to avoid password to be exposed once the database is hacked, the way of storing password should be guaranteed to protect the data to be revealed. Hashing could provide as a solution to this requirement. The team chooses MD5 as the algorithm for hashing. 

(Harper-MD5 explanation).

In the implementation, the team protects the password by, firstly, hashing the password in the endpoint of registration. Secondly, when the user tries to log in, the password would be hashed and then compared to the data in the database. Also, for every endpoint to offer the information of user, the endpoint would avoid offering anything related to the password.

\subsubsection{File Conflict Solution}

(Harper-describe the file conflict problem here)

The team applies file locking as a solution to the file conflict. 

(Harper-describe file lock here)

In the implementation, the server application uses a JSON file to store every details for files on the server. This includes the locking status of the file. So if an user is uploading a file, the file would be locked and any other user who intents to update the file would be refuse and receive a error message telling the fact that the file is locked.

Further, to avoid users to update a file and overwrite a new version of a file without noticing it, the API for updating the file is designed to require the user to offer the last version name of the file to ensure the user to know the latest version and confirm to overwrite the latest version of the file.

\subsubsection{Server Application Hosting: Azure}

To provide access for all the clients, the application should be deployed on a machine in the public network. The team selects virtual machine on Azure as the solution.

(Harper-describe Azure here, include comparison with AWS or Google Cloud Platform)

By using virtual machine on Azure, the team can easily scale the service if needed. In addition to that, the platform offer services include bind an ip address with the machine that help the service to be able to provide service in a fixed location on the Internet.

\subsubsection{Testing Approach}

The team applied black box testing on this project.

(Harper-explain black box testing and its pros and cons comparing to other approaches)

\subsubsection{Testing Cases}

\begin{itemize}

\item\textbf{File upload}
    \begin{itemize}
        \item{Test Scenario: Verify the function of uploading the file}
        \item{Test Case: Prepare a file to upload. In this test, a text file is created for the text.}
        \item{Test Step(s): make a POST HTTP request on the endpoint upload a file to upload the file.}
        \item{Test Result/Expectation: The file should be successfully uploaded in the file storage folder given a file id and version in the file.json in the file folder. The WebSocket event for a new file uploaded should be triggered}
        \item{Test Status: Pass}
    \end{itemize}
\item\textbf{File update}
    \begin{itemize}
        \item{Test Scenario: Verify the function of updating the file to update a file}
        \item{Test Case: Prepare a file to upload. In this test, a text file is created for the text.}
        \item{Test Step(s):}
            \begin{enumerate}
                \item{make a POST HTTP request on the endpoint upload a file to upload the file.}
                \item{change the content in the file}
                \item{make another POST HTTP request on the endpoint upload a file to update the file.}
            \end{enumerate}
        \item{Test Result/Expectation: The file should be successfully uploaded in the file storage folder given a file id and version in the file.json in the file folder. The WebSocket event for a new file uploaded should be triggered. After the second upload, the file in the folder should be changed and the version of the file should be edited. All the clients should receive notification by WebSocket for file update}
        \item{Test Status: Pass}
    \end{itemize}
\item\textbf{File rename}
\begin{itemize}
        \item{Test Scenario: Verify the function of renaming the file}
        \item{Test Case: Select a file on the server and change the name of a file on the server. In this case, the team uses the file they uploaded from the first test}
        \item{Test Step(s): make a POST HTTP request on the endpoint to rename a file on the server.}
        \item{Test Result/Expectation: The file specified should be successfully renamed}
        \item{Test Status: Pass}
\end{itemize}
\item\textbf{File delete}
\begin{itemize}
        \item{Test Scenario: Verify the function of deleting the file}
        \item{Test Case: Select a file on the server and delete the name of a file on the server. In this case, the team uses the file they uploaded from the second test}
        \item{Test Step(s): make a POST HTTP request on the endpoint to delete a file on the server.}
        \item{Test Result/Expectation: The file specified should be successfully deleted}
        \item{Test Status: Pass}
\end{itemize}
\item\textbf{User register}
\begin{itemize}
        \item{Test Scenario: Verify the function of registation of a new user}
        \item{Test Case: A set of user information is prepared. This includes the username to be testuser, password to be pwdtest, firstname to be Danny, and last name to be Yao}
        \item{Test Step(s): make a POST HTTP request on the endpoint to register a new user.}
        \item{Test Result/Expectation: The response should be successful with the user data just created, and a user should be created in the database.}
        \item{Test Status: Pass}
\end{itemize}
\item\textbf{User log In}
\begin{itemize}
        \item{Test Scenario: Verify the function of logging in of a user}
        \item{Test Case: The username and password from last test are used here to test the log in process.}
        \item{Test Step(s): make a POST HTTP request on the endpoint to log in a user.}
        \item{Test Result/Expectation: The response should include a token for the user's authorization in other HTTP request.}
        \item{Test Status: Pass}
\end{itemize}
\item\textbf{User Authorization}
\begin{itemize}
        \item{Test Scenario: Verify the authorization middleware to block the request without authorization}
        \item{Test Case: Nothing to provided as testing data set.}
        \item{Test Step(s): make a GET HTTP request on the endpoint to get all the information for all the files on server.}
        \item{Test Result/Expectation: The response should be an error response.}
        \item{Test Status: Pass}
\end{itemize}
\item\textbf{File Download}
\begin{itemize}
        \item{Test Scenario: Verify the download process of the file on the server}
        \item{Test Case: A file id is provided to specify the file to be downloaded}
        \item{Test Step(s): make a GET HTTP request on the endpoint to get a file on the server.}
        \item{Test Result/Expectation: The response should be an successful response following a download to be started.}
        \item{Test Status: Pass}
\end{itemize}
\end{itemize}
\subsection{Data Storage}
\subsubsection{MongoDB}


The team chooses MongoDB as its database.

(Harper-explanation for MongoDB)

\subsubsection{Table Scheme}

For the project, the team designed two tables to store the structured data. First, a table called user is to store all the data related to users' information. The fields include id of the user as the primary key, username, hashed password, first and last name of the user. Besides, A table called files is to store detailed information of files. This include the id of the file as primary key, version, locking status, file name, and the location of the file.

\subsubsection{Difficulties: Stability of Database Connection }

Due to the fact that the upload process of the files could be very fast, the data storage application should be able to update the locking status of file very fast. Further, If the the locking status fail to be changed, the result could be that a file to be locked forever, or a file to be overwritten by another conflict file. To avoid these situations, the data storage should be able to avoid failure on data updates. 

Regarding the problems addressed above, the connection between MongoDB server and backend side application should be stable to reach the requirements. But there is no guarantee that the connection will always be stable. To solve the problem, the team decides to store the information of the files in a local JSON file. By using JSON files in the local machine, the applications does not require a stable connection between database server and backend application server, and all the data can be managed easily.

\section{Teamwork}
After initial report of the project. The subteam for backend development still could not find a consensus on which language to use as well as the solution for real-time synchronization. As a result, the team made a decision of switching roles between Yao Te-Chien and Muhumuza, Isaac. With more experience on WebSocket as a real-time and Node.js communication, Yao Te-Chien change the language for backend to Javascript, and Muhumuza, Isaac focused on contributing on using Nodejs to implement all the features related to file system on desktop client.

However, In the backend team, due to the lack of experience of Zhang, Yiwei Harper, even though Harper tried to contribute many times, but the qualities of the code did not meet the standard and can not integrate with the code written by others. As a consequence, Yao Te-Chien finishes all the tasks on implementation for backend. Harper mostly focused on writing background knowledge for the technology the team applied in the final report. 

\section{Evaluation}

\subsection{Possible Improvements on Team Work}

In term of the team-working in this project, there are multiple improvement can be made. First, the division of the jobs can be more specific and the responsibilities of every member should be more clear. At the beginning of the project, the team is divided into three subteams as backend, mobile client and desktop client division. However, further division on tasks should be conduct ealier, so the member can know their own duties at first. This could offer more time for all the members to investigate on the technologies choices and learn skills need to be applied in this project.

Besides, the dispute on the technologies to use should be settled earlier. In the project, the original backend subteam spent almost a month discussing different solutions and language to choose for the backend application, but still can not meet a consensus. The other members should have involved and help the subteam to reach a agreement. By doing this, the team member can start learning and doing research on the technologies earlier.

\subsection{Further Improvements}
\subsubsection{Mobile Client}
\subsubsection{Desktop Client}
\subsubsection{Backend Server Application}

The further implementation for the backend application would firstly be the optimization of the file storage system. The architecture of the backend application now in this project is to store the file shared in a folder in the directory of the backend application. This might cause multiple questions. First, the file could be changed or accidentally deleted when developing the application. Also, this mechanism can not provide multiple file requests in a short period. By using file storage service offered by Azure, AWS or other service provider, the file could be more secured and be able to serve many request at a short period of time. Beside, combing a CDN could make the cost lower and faster.

In term of service design, the server application can not only store the latest version of the files, three or even more versions can be stored in the file system in case the user want to access the older versions of the files. This could also fix the issue that the user might accidentally overwrite a file with a error file or file with wrong content. Furthermore, a mechanism for compare files of different version can be used to reduce the time on updating a new file. In other word, if only the difference of a files in a new version should be uploaded in updating scenario, the task can be done way faster.

Moreover, the idea of difference checking on different versions of a file can be stored as logs in the system. The user can track all the change, and remove any error they encounter in the file in a well-organized fashion. Combing the user system, this file synchronization system can be used as a collaboration tool for any scenario on digital content.

\section{Peer assessment}


\section{Reference}

\end{document}
